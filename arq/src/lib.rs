//! Arq is a library to simplify interactions with files backed up by
//! [Arqbackup](https://www.arqbackup.com/).
//!
//! Currently it supports only files generated by Arq (the program) versions 4.5 and above.
//!
//! In its present state, this library allows reading files but never writing, so it's not
//! possible to build a full replacement of Arq (the program) with this library.
//!
//! NOTE: A lot of the documentation, especially the one describing the data formats,
//! comes from [https://arqbackup.com](https://www.arqbackup.com/arq_data_format.txt). All
//! credit should go to those folks.
//!
//! ## Installation
//!
//! Add this to your `Cargo.toml`:
//!
//! ```toml
//! [dependencies]
//! arq = "0.1"
//! ```
//!
//! ## Examples
//!
//! 1. Reading a computer info entry:
//!
//! ```
//! extern crate arq;
//! let reader = std::io::Cursor::new("<plist version=\"1.0\">
//!    <dict>
//!        <key>userName</key>
//!        <string>someuser</string>
//!        <key>computerName</key>
//!        <string>somecomputer</string>
//!    </dict>
//!    </plist>");
//! let data = arq::computer::ComputerInfo::new(reader, "someuuid".to_string()).unwrap();
//! assert_eq!(data.computer_name, "somecomputer".to_string());
//! assert_eq!(data.user_name, "someuser".to_string());
//! assert_eq!(data.uuid, "someuuid".to_string());
//!```
//!
//! 2. Reading an Arq5 format tree (e.g., from a backup made with Arq 5)
//! // Note: You'd typically get `tree_blob_data` by fetching a blob (using its SHA1 from a Commit)
//! // and then decrypting it. The `commit.tree_compression_type` would tell you the compression.
//!
//! // For this example, assume `decompressed_arq5_tree_data` are the bytes of an Arq5 tree,
//! // already decompressed, starting with "TreeV0XX".
//! let decompressed_arq5_tree_data: Vec<u8> = vec![
//!     b'T', b'r', b'e', b'e', b'V', b'0', b'2', b'2', // Header: "TreeV022"
//!     // Minimal Arq5 Tree data would follow. This example will likely fail if not enough bytes are provided.
//!     // For a runnable example, valid Arq5 tree bytes are needed here.
//!     // The following are placeholder bytes for xattrs_compression_type, acl_compression_type, etc.
//!     0,0,0,0, // xattrs_compression_type (None)
//!     0,0,0,0, // acl_compression_type (None)
//!     0, // xattrs_blob_key (null string flag)
//!     0,0,0,0,0,0,0,0, // xattrs_size (0)
//!     0, // acl_blob_key (null string flag)
//!     0,0,0,0, // uid
//!     0,0,0,0, // gid
//!     0,0,0,0, // mode
//!     0,0,0,0,0,0,0,0, // mtime_sec
//!     0,0,0,0,0,0,0,0, // mtime_nsec
//!     0,0,0,0,0,0,0,0, // flags
//!     0,0,0,0, // finderFlags
//!     0,0,0,0, // extendedFinderFlags
//!     0,0,0,0, // st_dev
//!     0,0,0,0, // st_ino
//!     0,0,0,0, // st_nlink
//!     0,0,0,0, // st_rdev
//!     0,0,0,0,0,0,0,0, // ctime_sec
//!     0,0,0,0,0,0,0,0, // ctime_nsec
//!     0,0,0,0,0,0,0,0, // st_blocks
//!     0,0,0,0, // st_blksize
//!     0,0,0,0,0,0,0,0, // create_time_sec (assuming version >= 15 for simplicity)
//!     0,0,0,0,0,0,0,0, // create_time_nsec
//!     0,0,0,0, // missing_node_count (0, assuming version >= 18)
//!     0,0,0,0  // node_count (0)
//! ];
//!
//! // Since data is already decompressed and starts with header, use CompressionType::None
//! match arq::tree::Tree::new_arq5(&decompressed_arq5_tree_data, arq::compression::CompressionType::None) {
//!     Ok(tree) => {
//!         assert_eq!(tree.version, 22);
//!         println!("Parsed Arq5 tree version: {}", tree.version);
//!     }
//!     Err(e) => {
//!         // This example might error if placeholder bytes are insufficient/invalid for a minimal tree
//!         eprintln!("Failed to parse tree example: {}", e);
//!         // For a real test, ensure `decompressed_arq5_tree_data` is a valid full tree byte sequence.
//!     }
//! }
//! ```
//!
extern crate aes;
extern crate byteorder;
extern crate chrono;
#[cfg_attr(test, macro_use)]
extern crate hex_literal;
extern crate hmac;
extern crate plist;
extern crate ring;
extern crate serde;
#[macro_use]
extern crate serde_derive;
extern crate serde_json;
extern crate sha1;
extern crate sha2;

pub mod arq7;
pub mod blob_location;
pub mod commit;
pub mod compression;
pub mod computer;
pub mod error;
pub mod folder;
pub mod node;
pub mod object_encryption;
pub mod packset;
pub mod tree;
pub mod type_utils;

mod blob;
mod date;
mod lz4;
mod utils;
